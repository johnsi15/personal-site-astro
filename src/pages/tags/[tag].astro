---
import { CollectionEntry, getCollection } from 'astro:content';
import Layout from '../../layouts/index.astro'

import PostsGrid from '../../components/PostsGrid';
import Cover from '../../components/Cover';
import PostTitle from '../../components/PostTitle';

export async function getStaticPaths() {
	const allPosts = await getCollection('blog');

  let filteredPosts = 
      allPosts.filter((p) => { 
        return p.data.title && p.data.publishedDate; 
      });

  let dix = {};
  // console.log({filteredPosts})
  filteredPosts.forEach((post) => {
    // console.log(post.data.tags)
    post.data.tags.forEach((tag) => {
      if (!dix[tag]) dix[tag] = 0;
      dix[tag] += 1;
    });
  });
  // console.log('dix', dix); // <-- prints out our tag-cloud data.

  let array = [];
  // format the data to return from getStaticPaths()
  for (let prop in dix) {
    let data = {
      params: { tag: prop.toLocaleLowerCase().replaceAll(' ', '-') },
      props: { tagName: prop, count: dix[prop] }
    }
    array.push(data);
  }
  return array;
}

type Props = CollectionEntry<'blog'>;
const allPosts = await getCollection('blog');

const { tagName} = Astro.props;
// const { tag } = Astro.params;

console.log({ tagName });
// console.log({ tag })

// grab the selected tag from the url (dynamic [tag])
let filteredPosts = allPosts.filter((p) => { 
      return p.data.title && p.data.publishedDate; 
    });

let blogEntries = filteredPosts.sort(
	(a, b) => a.data.publishedDate.valueOf() - b.data.publishedDate.valueOf()
);

let posts = blogEntries.filter((p) => { 
  // console.log(p.data.tags)
  return p.data.tags.includes(tagName); 
});
---

<Layout>
  <Cover>
    <PostTitle capitalize='capitalize'>{tagName}</PostTitle>
  </Cover>
  <section id='Tag' class='container'>
    <PostsGrid posts={posts} columns='3' />
  </section>
</Layout>

<style>
	#Tag {
    /* margin-top: 70px; */
    flex: 1;
  }
</style>
